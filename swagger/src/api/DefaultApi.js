/**
 * Compute Service API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Job', 'model/CwlBinding'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Job'), require('../model/CwlBinding'));
  } else {
    // Browser globals (root is window)
    if (!root.ComputeServiceApi) {
      root.ComputeServiceApi = {};
    }
    root.ComputeServiceApi.DefaultApi = factory(root.ComputeServiceApi.ApiClient, root.ComputeServiceApi.Job, root.ComputeServiceApi.CwlBinding);
  }
}(this, function(ApiClient, Job, CwlBinding) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/DefaultApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Job>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list of jobs
     * get a list of all jobs, running, cancelled, or otherwise.
     * @param {module:api/DefaultApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Job>}
     */
    this.jobsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Job];

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsJobIdCancelPost operation.
     * @callback module:api/DefaultApi~jobsJobIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobId Job ID
     * @param {module:api/DefaultApi~jobsJobIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.jobsJobIdCancelPost = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId == undefined || jobId == null) {
        throw "Missing the required parameter 'jobId' when calling jobsJobIdCancelPost";
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/{jobId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsJobIdDelete operation.
     * @callback module:api/DefaultApi~jobsJobIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobId Job ID
     * @param {module:api/DefaultApi~jobsJobIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.jobsJobIdDelete = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId == undefined || jobId == null) {
        throw "Missing the required parameter 'jobId' when calling jobsJobIdDelete";
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsJobIdGet operation.
     * @callback module:api/DefaultApi~jobsJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobId Job ID
     * @param {module:api/DefaultApi~jobsJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    this.jobsJobIdGet = function(jobId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId == undefined || jobId == null) {
        throw "Missing the required parameter 'jobId' when calling jobsJobIdGet";
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Job;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsPost operation.
     * @callback module:api/DefaultApi~jobsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * submit a new job
     * submit a new job from a workflow definition
     * @param {String} workflow location of cwl workflow definition.
     * @param {Object} opts Optional parameters
     * @param {module:model/CwlBinding} opts.body input binding for cwl workflow (json key value pairs)
     * @param {module:api/DefaultApi~jobsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.jobsPost = function(workflow, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'workflow' is set
      if (workflow == undefined || workflow == null) {
        throw "Missing the required parameter 'workflow' when calling jobsPost";
      }


      var pathParams = {
      };
      var queryParams = {
        'workflow': workflow
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback module:api/DefaultApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the server is working at all, returns some status info.
     * @param {module:api/DefaultApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.rootGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
